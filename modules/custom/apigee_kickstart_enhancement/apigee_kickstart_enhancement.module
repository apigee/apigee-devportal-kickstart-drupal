<?php

/**
 * @file
 * Copyright 2018 Google Inc.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

/**
 * @file
 * Main module file for Apigee Kickstart Enhancement.
 */

use Apigee\Edge\Api\Management\Entity\AppCredentialInterface;
use Apigee\Edge\Structure\CredentialProduct;
use Drupal\apigee_edge\Entity\AppInterface;
use Drupal\apigee_edge\Entity\EdgeEntityViewBuilder;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\user\UserInterface;

/*
 * Load all theme functions.
 */
require_once __DIR__ . '/apigee_kickstart_enhancement.theme.inc';

/**
 * Implements hook_theme().
 */
function apigee_kickstart_enhancement_theme($existing, $type, $theme, $path) {
  return [
    'secret' => [
      'render element' => 'elements',
      'file' => 'apigee_kickstart_enhancement.theme.inc',
    ],
    'pseudo_field' => [
      'variables' => ['field' => NULL],
      'file' => 'apigee_kickstart_enhancement.theme.inc',
    ],
  ];
}

/**
 * Implements hook_local_tasks_alter().
 */
function apigee_kickstart_enhancement_local_tasks_alter(&$local_tasks) {
  // Rename the user local tasks and show these first.
  if (isset($local_tasks['entity.user.canonical'])) {
    $local_tasks['entity.user.canonical']['title'] = t('Profile home');
    $local_tasks['entity.user.canonical']['weight'] = -10;
  }
  if (isset($local_tasks['entity.user.edit_form'])) {
    $local_tasks['entity.user.edit_form']['title'] = t('Edit profile');
    $local_tasks['entity.user.edit_form']['weight'] = -9;
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function apigee_kickstart_enhancement_entity_type_alter(array &$entity_types) {
  // Update the view builder for apidoc.
  if (isset($entity_types['apidoc'])) {
    $entity_types['apidoc']->setViewBuilderClass(EdgeEntityViewBuilder::class);
  }
}

/**
 * Implements hook_preprocess().
 */
function apigee_kickstart_enhancement_preprocess_menu(&$variables) {
  // Hide the registration link for authenticated users.
  foreach ($variables['items'] as $key => &$item) {
    if ($item['url']->isRouted() && $item['url']->getRouteName() === 'user.register' && \Drupal::currentUser()->isAuthenticated()) {
      unset($variables['items'][$key]);
    }
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function apigee_kickstart_enhancement_entity_extra_field_info() {
  $fields = [];

  // Make the user fields configurable.
  foreach (_apigee_kickstart_user_extra_fields() as $field_name => $field_info) {
    $fields['user']['user']['display'][$field_name] = [
      'label' => $field_info['label'],
      'weight' => 10,
      'visible' => FALSE,
    ];
  }

  // Add warnings to app.
  foreach (\Drupal::service('apigee_kickstart.enhancer')->getAppEntityTypes() as $entity_type_id => $app_entity_type) {
    $fields[$entity_type_id][$entity_type_id]['display']['warnings'] = [
      'label' => t('Warnings'),
      'weight' => 10,
      'visible' => FALSE,
    ];
  }

  return $fields;
}

/**
 * Implements hook_entity_view().
 */
function apigee_kickstart_enhancement_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $entity_type = $entity->getEntityType();
  if (\Drupal::service('apigee_kickstart.enhancer')
    ->isAppEntityType($entity_type)) {
    $warnings = _apigee_kickstart_enhancement_check_app_warnings($entity, $entity_type);
    if (count($warnings)) {
      $build['warnings'] = [
        '#theme' => 'status_messages',
        '#message_list' => [
          'warning' => $warnings,
        ],
      ];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function apigee_kickstart_enhancement_user_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  foreach (_apigee_kickstart_user_extra_fields() as $field_name => $field) {
    if ($display->getComponent($field_name)) {
      $value = is_callable($field['value_callback']) ? $field['value_callback']($entity) : NULL;

      if ($value) {
        // Render as pseudo-fields.
        $build[$field_name] = [
          '#theme' => 'pseudo_field',
          '#field' => [
            'name' => $field_name,
            'label' => $field['label'],
            'value' => $value,
          ],
        ];
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function apigee_kickstart_enhancement_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Alter the billing details form.
  if (strpos($form_id, '_billing_details_form')) {
    $form['#attributes']['class'] = 'form-editable';
    // Add a form heading.
    $form['heading'] = [
      '#type' => 'html_tag',
      '#value' => t('Billing Details'),
      '#tag' => 'h4',
      '#weight' => -100,
    ];

    // Wrap all elements in a div.
    $form['heading']['#suffix'] = '<div class="wrapper">';
    $form['actions']['#suffix'] = '</div>';

    // Render fieldsets as simple containers.
    foreach (Element::children($form) as $child) {
      if ($form[$child]['#type'] === 'fieldset') {
        $form[$child]['#type'] = 'container';
      }
    }

    // Fix for billing type.
    $form['billing']['billing_type']['#prefix'] = '<strong>' . $form['billing']['#title'] . ': </strong><span>';
    $form['billing']['billing_type']['#suffix'] = '</span>';
    $form['billing']['billing_type']['#markup'] = ucfirst(strtolower($form['billing']['billing_type']['#markup']));
  }
}

/**
 * Implements hook_apigee_m10n_prepaid_balance_list_alter().
 */
function apigee_kickstart_enhancement_apigee_m10n_prepaid_balance_list_alter(array &$build, EntityInterface $entity) {
  // Add a title to the list.
  $build['title'] = [
    '#type' => 'html_tag',
    '#value' => t('Prepaid Balance'),
    '#tag' => 'h3',
    '#weight' => -100,
  ];

  // Remove the table caption.
  $build['table']['#caption'] = '';
}

/**
 * Returns an array of extra fields for the user profile.
 */
function _apigee_kickstart_user_extra_fields() {
  return [
    'display_name' => [
      'label' => t('Name'),
      'value_callback' => function (UserInterface $user) {
          $first_name_last_name = trim($user->get('first_name')->value) . ' ' . trim($user->get('last_name')->value);
          // If both fields were empty this string still could be empty.
          $first_name_last_name = trim($first_name_last_name);
          if (!empty($first_name_last_name)) {
            return $first_name_last_name;
          } else {
            return $user->label();
          }
      },
    ],
    'username' => [
      'label' => t('Username'),
      'value_callback' => function (UserInterface $user) {
        return $user->getAccountName();
      },
    ],
    'email' => [
      'label' => t('Email'),
      'value_callback' => function (UserInterface $user) {
        return $user->getEmail();
      },
    ],
    'roles' => [
      'label' => t('Roles'),
      'value_callback' => function (UserInterface $user) {
        return implode(', ', $user->getRoles(TRUE));
      },
    ],
    'timezone' => [
      'label' => t('Timezone'),
      'value_callback' => function (UserInterface $user) {
        return $user->getTimeZone();
      },
    ],
  ];
}

/**
 * Checks credentials of an app and returns warnings about them.
 *
 * TODO: Abstract
 * \Drupal\apigee_edge\Entity\ListBuilder\AppListBuilder::checkAppCredentialWarnings.
 *
 * @param \Drupal\apigee_edge\Entity\AppInterface $app
 *   The app entity to be checked.
 * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
 *   The app entity type.
 *
 * @return array
 *   An associative array that contains information about the revoked
 *   credentials and revoked or pending API products in a credential.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function _apigee_kickstart_enhancement_check_app_warnings(AppInterface $app, EntityTypeInterface $entity_type) {
  $warnings = [];
  $warnings['revokedCred'] = FALSE;
  $warnings['revokedOrPendingCredProduct'] = FALSE;
  $warnings['expiredCred'] = FALSE;

  foreach ($app->getCredentials() as $credential) {
    // Check for expired credentials.
    if (($expired_date = $credential->getExpiresAt()) && Drupal::time()->getRequestTime() - $expired_date->getTimestamp() > 0) {
      $warnings['expiredCred'] = t('At least one of the credentials associated with this @app is expired.', [
        '@app' => mb_strtolower($entity_type->getSingularLabel()),
      ]);
    }

    if ($credential->getStatus() === AppCredentialInterface::STATUS_APPROVED) {
      foreach ($credential->getApiProducts() as $cred_product) {
        if ($cred_product->getStatus() == CredentialProduct::STATUS_REVOKED || $cred_product->getStatus() == CredentialProduct::STATUS_PENDING) {
          $args = [
            '@app' => mb_strtolower($entity_type->getSingularLabel()),
            '@api_product' => mb_strtolower(Drupal::entityTypeManager()->getDefinition('api_product')->getSingularLabel()),
            '@status' => $cred_product->getStatus() == CredentialProduct::STATUS_REVOKED ? t('revoked') : t('pending'),
          ];
          if (count($app->getCredentials()) === 1) {
            /** @var \Drupal\apigee_edge\Entity\ApiProductInterface $apiProduct */
            $api_product = Drupal::entityTypeManager()->getStorage('api_product')->load($cred_product->getApiproduct());
            $args['%name'] = $api_product->label();
            $warnings['revokedOrPendingCredProduct'] = t('%name @api_product associated with this @app is in @status status.', $args);
          } else {
            $warnings['revokedOrPendingCredProduct'] = t('At least one @api_product associated with one of the credentials of this @app is in @status status.', $args);
          }
          break;
        }
      }
    }
  }

  return array_filter($warnings);
}
