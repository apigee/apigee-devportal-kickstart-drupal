<?php

use Drupal\Component\Serialization\Yaml;
use Drupal\Core\File\Exception\FileException;
use Drupal\Core\File\FileSystemInterface;
/**
 * @file
 * Copyright 2019 Google Inc.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

use Drupal\apigee_devportal_kickstart\Installer\ApigeeDevportalKickstartTasksManager;
use Drupal\apigee_devportal_kickstart\Installer\Form\ApigeeEdgeConfigurationForm;
use Drupal\apigee_devportal_kickstart\Installer\Form\ApigeeMonetizationConfigurationForm;
use Drupal\apigee_devportal_kickstart\Installer\Form\DemoInstallForm;
use Drupal\Core\Messenger\MessengerInterface;
use Drupal\menu_link_content\Entity\MenuLinkContent;

/**
 * @file
 * Install, update and uninstall functions for Apigee Kickstart profile.
 */

/**
 * Implements hook_install_tasks().
 */
function apigee_devportal_kickstart_install_tasks(&$install_state) {
  // Initialize the seven theme and set it as active.
  // This ensures the installation theme is maintained across tasks.
  $theme = \Drupal::service('theme.initialization')->initTheme('seven');
  \Drupal::theme()->setActiveTheme($theme);

  $tasks = [
    DemoInstallForm::class => [
      'display_name' => t('Install demo content'),
      'type' => 'form',
    ],
    'apigee_devportal_kickstart_theme_setup' => [
      'display_name' => t('Install theme'),
      'display' => FALSE,
    ],
  ];

  // Add monetization tasks if the configured organization is monetizable.
  if (Drupal::hasService('apigee_devportal_kickstart.monetization') && Drupal::service('apigee_devportal_kickstart.monetization')->isMonetizable()) {
    $tasks[ApigeeMonetizationConfigurationForm::class] = [
      'display_name' => t('Configure monetization'),
      'type' => 'form',
    ];

    // Setup monetization if all dependencies are met.
    if (empty(Drupal::service('apigee_devportal_kickstart.monetization')->getMissingDependencies())) {
      $tasks['apigee_devportal_setup_monetization'] = [
        'display_name' => t('Setup monetization'),
        'type' => 'batch',
      ];
    }
  }

  $tasks['apigee_devportal_kickstart_finish'] = [
    'display' => FALSE,
  ];

  return $tasks;
}

/**
 * Implements hook_install_tasks_alter().
 */
function apigee_devportal_kickstart_install_tasks_alter(&$tasks, $install_state) {
  // Do not add the apigee_edge_configure_form tasks if non-interactive install
  // since drush si cannot set default values for the form.
  // Use `drush key-save apigee_edge_connection_default '{\"auth_type\":\"basic\",\"organization\":\"ORGANIZATION\",\"username\":\"USERNAME\",\"password\":\"PASSWORD"}' --key-type=apigee_auth -y`
  // to create a key after drush si.
  if (!$install_state['interactive']) {
    return;
  }

  // Add tasks for configuring Apigee authentication and monetization.
  $apigee_kickstart_tasks = [
    ApigeeEdgeConfigurationForm::class => [
      'display_name' => t('Configure Apigee Edge'),
      'type' => 'form',
    ],
    'apigee_devportal_monetization_preflight' => [],
  ];

  // The task should run before install_configure_form which creates the user.
  $tasks_copy = $tasks;
  $tasks = array_slice($tasks_copy, 0, array_search('install_configure_form', array_keys($tasks))) + $apigee_kickstart_tasks + $tasks_copy;
}

/**
 * Prepares profile for monetization setup.
 *
 * @param array $install_state
 *   The install state.
 */
function apigee_devportal_monetization_preflight(array &$install_state) {
  if (!\Drupal::moduleHandler()->moduleExists('address')) {
    return;
  }

  // The monetization configuration form needs an address field.
  // Enable the address module.
  \Drupal::service('apigee_devportal_kickstart.monetization')->ensureInstalled('address');
}

/**
 * Install task for setting up monetization and additional modules.
 *
 * @param array $install_state
 *   The install state.
 *
 * @return array
 *   A batch definition.
 */
function apigee_devportal_setup_monetization(array &$install_state) {
  if (isset($install_state['m10n_config']) && ($config = $install_state['m10n_config'])) {
    // Add an operations to install modules.
    $operations = [
      [
        [ApigeeDevportalKickstartTasksManager::class, 'init'],
        [$config]
      ],
      [
        [ApigeeDevportalKickstartTasksManager::class, 'installModules'],
        [$config['modules']],
      ],
    ];

    // Perform additional tasks for apigee_m10n_add_credit.
    if (in_array('apigee_m10n_add_credit', $config['modules'])) {
      $operations = array_merge($operations, [
        [
          [ApigeeDevportalKickstartTasksManager::class, 'importCurrencies'],
          [$config['supported_currencies']],
        ],
        [
          [ApigeeDevportalKickstartTasksManager::class, 'createStore'],
          [$config['store']],
        ],
        [
          [ApigeeDevportalKickstartTasksManager::class, 'createProductType'],
          [$config],
        ],
        [
          [ApigeeDevportalKickstartTasksManager::class, 'createProducts'],
          [$config['supported_currencies']],
        ],
      ]);

      if (!empty($config['gateway'])) {
        $operations[] = [
          [ApigeeDevportalKickstartTasksManager::class, 'createPaymentGateway'],
          [$config],
        ];
      }
    }

    $batch = [
      'operations' => $operations,
      'title' => t('Setting up monetization'),
      'error_message' => t('The installation has encountered an error.'),
      'progress_message' => t('Completed @current out of @total tasks.'),
    ];

    return $batch;
  }
}

/**
 * Install the theme.
 *
 * @param array $install_state
 *   The install state.
 */
function apigee_devportal_kickstart_theme_setup(array &$install_state) {
  // Clear all status messages generated by modules installed in previous step.
  Drupal::messenger()->deleteByType(MessengerInterface::TYPE_STATUS);

  // Set apigee_kickstart as the default theme.
  \Drupal::configFactory()
    ->getEditable('system.theme')
    ->set('default', 'apigee_kickstart')
    ->save();

  // Ensure that the install profile's theme is used.
  // @see _drupal_maintenance_theme()
  \Drupal::service('theme.manager')->resetActiveTheme();

  // Enable the admin theme for editing content.
  \Drupal::configFactory()
    ->getEditable('node.settings')
    ->set('use_admin_theme', TRUE)
    ->save(TRUE);
}

/**
 * Run any additional tasks for the installation.
 */
function apigee_devportal_kickstart_finish() {
  // Re-run the optional config import again since Drupal installation profile
  // imports optional configuration only once.
  // @see \Drupal\Core\Config\ConfigInstaller::installDefaultConfig
  // @see install_install_profile()
  \Drupal::service('config.installer')->installOptionalConfig();
}

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function apigee_devportal_kickstart_install() {

  // Get profile path.
  $src_path = drupal_get_path('profile', 'apigee_devportal_kickstart') . '/resources/files';

  // Get public files directory.
  $dest_path = \Drupal::config('system.file')->get('default_scheme') . '://';

  // Files to copy.
  // Not all files are copied. So we list them here individually.
  $filesets = [
    '' => [
      'aditya-vyas-1392552-unsplash.jpg',
      'chuttersnap-255216-unsplash.png',
      'donald-giannatti-671274-unsplash.jpg',
      'nasa-43567-unsplash.jpg',
      'nasa-43569-unsplash.jpg',
      'nasa-89116-unsplash.jpg',
      'spacex-1130896-unsplash.jpg',
      'spacex-81773-unsplash.jpg',
      'terence-burke-1417892-unsplash.jpg',
    ],
    'default_images/' => [
      'profile-default.jpg',
    ],
    'apidoc_specs/' => [
      'httpbin-simple-oas3.yaml',
    ],
  ];

  // Copy files in public files directory. Note: Managed files are not desired.
  foreach ($filesets as $destination => $files) {
    foreach ($files as $file) {
      if (file_exists($src_path . '/' . $file)) {
        $file_system = \Drupal::service('file_system');

        // If the file exists in public://, it should be skipped, as these are
        // tied to media entities which hard-code the path/file.
        $directory = $dest_path . $destination;
        if (!empty($destination)) {
          $file_system->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY);
        }
        try {
          \Drupal::service('file_system')->copy($src_path . '/' . $file, $directory . $file);
        }
        catch (FileException $e) {
          // Do nothing.
        }
      }
    }
  }

  // Create a forum link.
  // This cannot be added as config since uninstalling forum.module will result
  // in a RouteNotFoundException.
  // See https://github.com/apigee/apigee-devportal-kickstart-drupal/issues/276.
  MenuLinkContent::create([
    'title' => 'Forum',
    'menu_name' => 'main',
    'link' => ['uri' => 'internal:/forum'],
    'weight' => 3,
  ])->save();
}

/**
 * Implements hook_requirements().
 */
function apigee_devportal_kickstart_requirements($phase) {
  $requirements = [];

  // Drupal 8.8.x requires pathauto >=8.x-1.6.
  // Make sure this requirement is met.
  if ($pathauto = Drupal::service('extension.list.module')->get('pathauto')) {
    $current_version = $pathauto->info['version'];
    $required_version = '8.x-1.6';
    if (!version_compare($current_version, $required_version, '>=')) {
      $requirements['apigee_devportal_kickstart_pathauto_version'] = [
        'title' => t('Apigee Devportal Kickstart'),
        'description' => t('Apigee Devportal Kickstart requires <a href=":url">Pathauto</a> <em>@required_version</em>. The current version is <em>@current_version</em>. Please update to the required version to ensure future compatibility.', [
          ':url' => 'https://drupal.org/project/pathauto',
          '@required_version' => $required_version,
          '@current_version' => $current_version,
        ]),
        'severity' => REQUIREMENT_ERROR,
      ];
    }
  }

  return $requirements;
}

/**
 * Implements hook_update_dependencies().
 */
function apigee_devportal_kickstart_update_dependencies() {
  $dependencies = [];

  if (\Drupal::moduleHandler()->moduleExists('apigee_api_catalog')) {
    // Make sure update 8007 is executed after apigee_api_catalog 8804.
    $dependencies['apigee_devportal_kickstart'][8007] = [
      'apigee_api_catalog' => 8804,
    ];
  }

  return $dependencies;
}

/**
 * Replace 'Forum' menu link with one that can be edited.
 */
function apigee_devportal_kickstart_update_8001(&$sandbox) {
  // Replaced apigee_devportal_kickstart.links.menu.yml with the following.
  MenuLinkContent::create([
    'title' => 'Forum',
    'menu_name' => 'main',
    'link' => ['uri' => 'internal:/forum'],
    'weight' => 3,
  ])->save();
}

/**
 * Disable deprecated module "apigee_kickstart_m10n_add_credit".
 */
function apigee_devportal_kickstart_update_8002(&$sandbox) {
  try {
    \Drupal::service('module_installer')->uninstall(['apigee_kickstart_m10n_add_credit']);
    $context['message'] = t('Uninstalled "apigee_kickstart_m10n_add_credit" module.');
  }
  catch (\Exception $exception) {
    watchdog_exception('apigee_kickstart', $exception);
  }
}

/**
 * Enable display settings for apps.
 */
function apigee_devportal_kickstart_update_8006(&$sandbox) {
  $config_factory = \Drupal::configFactory();
  foreach (\Drupal::service('apigee_kickstart.enhancer')->getAppEntityTypes() as $entity_type_id => $app_entity_type) {
    $config_factory->getEditable("apigee_edge.display_settings.{$entity_type_id}")
      ->set('display_type', 'view_mode')
      ->set('view_mode', 'collapsible_card')
      ->save();
  }
}

/**
 * Update to apigee_api_catalog 2.x.
 */
function apigee_devportal_kickstart_update_8007() {
  $moduleHandler = \Drupal::moduleHandler();
  if (!$moduleHandler->moduleExists('apigee_api_catalog')) {
    return;
  }

  $configPath = drupal_get_path('profile', 'apigee_devportal_kickstart') . '/config/install';

  $configToImport = 'core.entity_view_mode.node.card';
  $raw = file_get_contents("$configPath/$configToImport.yml");
  $data = Yaml::decode($raw);
  \Drupal::configFactory()
    ->getEditable($configToImport)
    ->setData($data)
    ->save(TRUE);

  if ($moduleHandler->moduleExists('views')) {
    $configToImport = 'views.view.apigee_api_catalog';
    $raw = file_get_contents("$configPath/$configToImport.yml");
    $data = Yaml::decode($raw);
    \Drupal::configFactory()
      ->getEditable($configToImport)
      ->setData($data)
      ->save(TRUE);
  }

}
